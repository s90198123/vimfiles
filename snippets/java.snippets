#====================================================================
# Modifications by Leandro Pincini < leandropincini@gmail.com >
#====================================================================
snippet main
	public static void main (String [] args) {
		${1:/* code */}
	}
#====================================================================
# End of Modifications
#====================================================================
snippet p
	System.out.print(${1:""});
	${2}
snippet pln
	System.out.println(${1:""});
	${2}
snippet pu
	public
snippet po
	protected
snippet pr
	private
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet if
	if (${1}) ${2}
snippet el
	else
snippet elif
	else if (${1}) ${2}
snippet wh
	while (${1}) ${2}
snippet for
	for (${1}; ${2}; ${3}) ${4}
snippet fore
	for (${1} : ${2}) ${3}
snippet sw
	switch (${1}) ${2}
snippet cs
	case ${1}:
		${2}
	${3}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename()`} ${2}
snippet in
	interface ${1:`Filename()`} ${2:extends Parent}${3}
snippet def
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
#====================================================================
# Added by Leandro Pincini < leandropincini@gmail.com >
#
#  Play framework's snippets session
#====================================================================
snippet m
	package models;

	import java.util.*;
	import javax.persistence.*;

	import play.db.jpa.*;
	import play.data.validation.*;

	@Entity
	public class ${1:`Filename()`} extends Model {
	    ${2:public String name;}
	}
snippet mtag
	package models;

	import java.util.*;
	import javax.persistence.*;

	import play.db.jpa.*;
	import play.data.validation.*;

	@Entity
	public class ${1:`Filename()`} extends Model {
	  public String name;

	  private $1(String name){
	    this.name = name;
	  }

	  public $1 getByName(){
		return findOrCreate(name);
	  }

	  public static $1 findOrCreate(String name){
		$1 ${3:it} = $1.find("name", name).first();
		if($3 == null){
		  $3 = new $1(name);
		}
		return $3;
	  }

	}
snippet c
	package controllers;

	import play.*;
	import play.mvc.*;
	import play.data.validation.*;

	import java.util.*;

	import models.*;

	public class ${1:`Filename()`} extends Controller {

	    public static void index() {
		  render();
	    }
	}
snippet j
	package jobs;

	import play.*;
	import play.jobs.*;

	import models.*;

	@OnApplicationStart
	public class ${1:`Filename()`} extends Job {

	  @Override
	  public void doJob() {

	  }
	}
snippet jo
	@On("0 0 12 * * ?")
snippet mc
	@Column(name="fk", columnDefinition="bigint default '0'")
snippet cb
	@Before(only={"login","logout"})
	static void checkAuthentification() {
		if(session.get("user") == null) login();
	}
snippet bs
	@PrePersist
snippet bsdef
	@PrePersist
	void ${1: onPrePersist}() {
	  ${2}
	}
snippet as
	@PostPersist
snippet asdef
	@PostPersist
	void ${1: onPostPersist}(){
	  ${2}
	}
snippet bu
	@PreUpdate
snippet budef
	@PreUpdate
	void ${1: PreUpdate}(){
	  ${2}
	}
snippet ws
	@With(Secure.class)
	${1}
snippet ft
	import play.test.*;
	import play.mvc.*;
	import play.mvc.Http.*;
	import org.junit.*;

	public class ${1:`Filename()`} extends FunctionalTest {

	  @Test
		public void testTheHomePage() {
		  Response response = GET("/");
		  assertStatus(200, response);
		}

	}
snippet ut
	import org.junit.*;

	import java.util.*;
	import play.test.*;
	import models.*;

	public class  ${1:`Filename()`} extends UnitTest {
	/**
	 * <p>
	 * Given , <br>
	 * When i add 1, <br>
	 * Then it should return 2, <br>
	 * </p>
	 */
	@Test
	public void testSomeMethod() {
		// Given
		final int i = 1;
		// When
		final int result = i + 1;
		// Then
		assertEquals(result, 2);
	  }
	}
snippet uta
	@After
	public final void tearDown() {
	  ${1}
	}
snippet utb
	@Before
	public final void setUp() {
	  ${1}
	}
snippet utm
	/**
	 * <p>
	 * Given , <br>
	 * When , <br>
	 * Then , <br>
	 * </p>
	 */
	@Test
	public void testSomeMethod() {
	  // Given
	  final int i = 1;
	  // When
	  final int result = i + 1;
	  // Then
	  assertEquals(result, 2);
	}
snippet confget
	Play.configuration.get(${1: ""});
	${2}
snippet isdev
	Play.mode.isDev();
	${1}
snippet ms
	@MappedSuperclass
	${1}
snippet mm
	@ManyToMany
	${1}
snippet mo
	@ManyToOne
	${1}
snippet om
	@OneToMany${1:(cascade=CascadeType.ALL)}
	${2}
snippet oo
	@OneToOne
	${1}
snippet action
	public static void ${1:index}(${2:args}) { ${3} }
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${3} }
snippet debug
	Logger.debug(${1:param});${2}
snippet error
	Logger.error(${1:param});${2}
snippet chchild
	public void set${1:child}($1 ${2:child}) {
	  if($2 != null){
		${3:`Filename()`} ${4:parent} = $3.find("$2 = ? and id != ?", $2, id).first();
		if($4 != null){
		  $4.$2 = null;
		  $4.save();
		}
	  }
	  this.$2 = $2;
	}
snippet saveifnew
	public ${1:`Filename()`} saveIfNew() {
	  if(!this.isPersistent()){
		return this.save();
	  } else {
		return this;
	  }
	}
snippet parent
	public ${1:parent} ${2:parent}() {
	  return $1.find("${3:child}", this).first();
	}
	${4}
snippet getbyname
	public ${1:`Filename()`} getByName(){
	  $1 ${2:it} = findOrCreate(name);
	  if($2 == null){
		return this;
	  }
	  return $2;
	}
	${3}
snippet gen
	public static ${1:`Filename()`} findOrCreate(String name){
	  $1 ${2:it} = $1.find("name", name).first();
	  if($2 == null){
		$2 = new $1(name);
	  }
	  return $2;
	}
	${3}
snippet findall
	List<${1:type}> ${2:items} = $1.findAll();${3}
snippet findbyid
	${1:type} ${2:item} = $1.findById(${3});${4}
snippet findfirst
	${1:type} ${2:item} = $1.find(${3}).first();${4}
snippet info
	Logger.info(${1:param});${2}
snippet rnf
	notFound(${1:param});${2}
snippet rnfin
	notFoundIfNull(${1:param});${2}
snippet rr
	redirect(${1:param});${2}
snippet ru
	unauthorized(${1:param});${2}
snippet ren
	render(${1:param});${2}
snippet rena
	renderArgs.put("${1}", ${2});${3}
snippet renb
	renderBinary(${1:param});${2}
snippet renj
	renderJSON(${1:param});${2}
snippet renx
	renderXml(${1:param});${2}
snippet unless
	(unless=${1:param});${2}
snippet warn
	Logger.warn(${1:param});${2}
#====================================================================
#  End of Play framework's snippets session
#====================================================================

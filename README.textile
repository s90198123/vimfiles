h1. Vim

It is recommended that you use gVim in either Windows or Linux and MacVim for
Mac. Download from:

* "Vim for Windows - gvim73_46.exe":http://www.vim.org/download.php#pc
* "Vim for Mac - macvim snapshot-56":https://github.com/b4winckler/macvim/downloads

h1. Bundled Plugins

h2. Util

* "Ack":https://github.com/vim-scripts/ack.vim - type :Ack [search pattern] to search your entire project
* "Align":https://github.com/vim-scripts/Align.vim - align blocks of text using equal sign, make comment boxes and more
* "AutoJump":https://github.com/trotter/autojump.vim - Adds autojump support to vim
* "Command-T":https://github.com/vim-scripts/Command-T - the fastest and most intuitive way for opening files in your project
* "matchit":https://github.com/vim-scripts/matchit.zip - extended % matching for HTML, LaTeX, and many other languages
* "neocomplcache":https://github.com/Shougo/neocomplcache - Ultimate auto-completion system for Vim.
* "supertab":https://github.com/vim-scripts/SuperTab - pseudo auto-complete with tab
* "surround":https://github.com/vim-scripts/surround.vim - add, change, remove surrounding parentheses, brackets, quotes, etc
* "vim-snipmate":https://github.com/akitaonrails/snipmate.vim - support for textmate-like snippets for several languages
* "vim-easymotion":http://www.vim.org/scripts/script.php?script_id=3526 - Vim motions on speed!
* "yankring":https://github.com/vim-scripts/YankRing.vim - Maintains a history of previous yanks, changes and deletes

h2. Explorer and Buffer

* "bufexplorer":https://github.com/vim-scripts/bufexplorer.zip - manage your file buffers
* "minibufexpl":https://github.com/fholgado/minibufexpl.vim - Elegant buffer explorer - takes very little screen space
* "NERD_commenter":http://www.vim.org/scripts/script.php?script_id=1218 - support to comment lines of code
* "NERD_tree":https://github.com/vim-scripts/The-NERD-tree - project pane that you can open with [leader] p
* "taglist":https://github.com/vim-scripts/taglist.vim - Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc)
* "tagbar":https://github.com/majutsushi/tagbar - Vim plugin that displays tags in a window, ordered by class etc.

h2. ruby

* "cucumber":http://www.vim.org/scripts/script.php?script_id=2973 - support for cucumber features such as syntax highlight, indentation, etc
* "endwise":http://www.vim.org/scripts/script.php?script_id=2386 - support to close Ruby blocks such as 'if', 'do' with 'end'
* "vim-ruby-sinatra":https://github.com/hallison/vim-ruby-sinatra - syntax highlight for Sinatra
* "vim-ruby":https://github.com/vim-ruby/vim-ruby/wiki - syntax highlight, smart identation, auto-complete for Ruby
* "rails":http://www.vim.org/scripts/script.php?script_id=1567 - lot's of tools to make it easier to manage your Rails projects
* "vim-rvm":https://github.com/tpope/vim-rvm - RVM support for Vim
* "vim-textobj-rubyblock":http://vimcasts.org/blog/2010/12/a-text-object-for-ruby-blocks/ - smart block selection in Ruby code
* "ragtag":http://www.vim.org/scripts/script.php?script_id=1896 - easier way to create tags for html, erb, etc
* "vim-bundler":https://github.com/tpope/vim-bundler - Bundler support for Vim

h2. Git

* "fugitive":https://github.com/vim-scripts/fugitive.vim - support for Git, adding convenient commands such as :Gstatus, :Gread, :Gmove

h2. Web and Syntax Highlight

* "haml":http://www.vim.org/scripts/script.php?script_id=1773 - syntax highlight for HAML
* "html5.vim":https://github.com/othree/html5.vim - omnicomplete function and syntax for HTML5
* "markdown":http://www.vim.org/scripts/script.php?script_id=1242 - syntax highlight for Markdown
* "syntastic":https://github.com/vim-scripts/Syntastic - checks for syntax errors in many languages
* "textile":http://www.vim.org/scripts/script.php?script_id=2305 - syntax highlight for Textile
* "vim-coffee-script":https://github.com/kchmck/vim-coffee-script - syntax highlight for Coffee Script
* "vim-jade":https://github.com/statianzo/vim-jade - Vim syntax highlighting for the Jade templating engine
* "vim-jquery":https://github.com/itspriddle/vim-jquery - Vim syntax file to add some colorations for jQuery keywords and css selectors
* "vim-preview":http://www.vim.org/scripts/script.php?script_id=3344 - [leader] P previews Markdown, Rdoc, Textile, html. Requires Ruby and other gems.
* "vividchalk":http://www.vim.org/scripts/script.php?script_id=1891 - color scheme inspired by the classic Vibrant for Textmate
* "Zencoding":http://www.vim.org/scripts/script.php?script_id=2981 - powerful way for HTML abbreviations (learn here: http://code.google.com/p/zen-coding/). Type abbreviation and press Ctrl+Y+comma (c-y ,)

h2. Java

* "javacomplete":http://www.vim.org/scripts/script.php?script_id=1785 - Omni Completion for JAVA
* "vjde":http://www.vim.org/scripts/script.php?script_id=1213 - Vim - Just a Development Envirement (Java/C++)

h1. Usage

Troubleshoot: Because of the large amount of submodules, if you ever have any
trouble after pulling from the repository, it will be easier to just back up
your old .vim folder and just git clone a new version.

h2. Linux and Mac

Clone this repo into your home directory either as <code>.vim</code> (linux/mac) or
<code>vimfiles</code> (Windows). Such as:

<pre><code>
git clone git://github.com/s90198123/vimfiles.git ~/.vim
</pre></code>

run this to get the snippets submodule:

<pre><code>
cd ~/.vim
git submodule update --init
</code></pre>

Now you should create a new <tt>.vimrc</tt> file in your home directory that
loads the pre-configured one that comes bundled in this package. You can do it
on Linux/Mac like this:

<pre><code>
echo "source ~/.vim/vimrc" > ~/.vimrc
</code></pre>

You should also create a new <tt>.gvimrc</tt> file in your home directory. You can do
it on Linux/Mac like this:

<pre><code>
echo "source ~/.vim/gvimrc" > ~/.gvimrc
</code></pre>

h2. Windows

Clone this repo into your home directory either as <code>.vim</code> (linux/mac) or
<code>vimfiles</code> (Windows). Such as:

<pre><code>
git clone git://github.com/s90198123/vimfiles.git ~/vimfiles
</pre></code>

run this to get the snippets submodule:

<pre><code>
cd ~/vimfiles
git submodule update --init
</code></pre>

On Windows you should create a <tt>_vimrc</tt> (underline instead of dot) and add
the following line inside:

<pre><code>
source ~/vimfiles/vimrc
</code></pre>

This way you can override the default configuration by adding your own inside
this file.

On Windows you should create a <tt>_gvimrc</tt> (underline instead of dot) and add
the following line inside:

<pre><code>
source ~/vimfiles/gvimrc
</code></pre>

This way you can override the default GUI configuration by adding your own inside
this file.

h1. Color Scheme

see more theme in "here":http://www.vi-improved.org/color_sampler_pack/

find <code>colorscheme</code> in <code>~/.vim/vimrc</code> and replace by your favorite theme

reference: "janus#ColorScheme":https://github.com/carlhuda/janus

h1. Help Tags

At first usage of vim, type ":" while in command mode and execute:

  call pathogen#helptags()

This will make the plugins documentations available upon :help

h1. Dependencies

You will need these dependencies figured out:

* Ruby (for the command-t plugin)
* Exuberant Ctags (http://ctags.sourceforge.net/)
* Ncurses-term (in Linux only)

In Ubuntu, for example, you will have to do:

<pre><code>
apt-get install exuberant-ctags ncurses-term
</code></pre>

In OS X, you can install ctags with homebrew

<pre><code>
brew install ctags
</code></pre>

On Windows you have to download Ctags and add ctags.exe in your PATH.

Mac OS X and most Linux distros come with Ruby already. If you're in Windows
look for Luis Lavena's latest Ruby Installer (http://rubyforge.org/projects/rubyinstaller/)

h1. IMPORTANT: Command-T

The latest version replaces the old Fuzzy Finder with a new one called
"Command-T" form wincent.com. I've replaced the old "Command-T" key
binding that used to open new tabs and assigned it to this new plugin
so it behaves the same as Textmate.

You may have problems in Mac/Linux because this plugin requires a native
extension, so you will have to do this:

<pre><code>
rvm use system # use this line if using rvm
cd ~/.vim/bundle/Command-T/ruby/command-t
ruby extconf.rb
make
</code></pre>

This means that you need to have your Ruby source files and GCC also
installed. A binary for Windows is already bundled so it should just
work. I've also included a binary compiled for Ruby Enterprise Edition,
but if you are using other Ruby distros, you will need to recompile.

There are binaries for Mac and Windows. The Mac version is compiled
against the default system Ruby for Mac OS X 10.6.5. The Windows version
is compiled against Ruby Installer 1.8.7-p330.

h2. Ubuntu 11.04 and/or Vim 7.3.35

Ubuntu 11.04 comes bundled with Vim 7.3.35, which has "flaky" Ruby support.
Even if you do everything right, you might see the following crashes when
trying to use Command-T:

<pre><code>
Vim: Caught deadly signal SEGV
Vim: Finished.

Segmentation fault
</code></pre>

If this happens to you, update Vim to 7.3.154:

<pre><code>
hg clone https://vim.googlecode.com/hg/ ~/vim
cd ~/vim
hg update -C v7-3-154
./configure --enable-rubyinterp --with-features=huge --enable-gui=gnome2
make
sudo make install
</code></pre>

More details can be found "here":http://kresimirbojcic.com/2011/05/14/installing-command-t-ubunutu-11.04-ruby-1.9.2.html
Note that the options '--with-features=huge --enable-gui=gnome2' are not mentioned on the post above but they are necessary to also update the graphical version of vim (gvim).

h1. IMPORTANT: Autojump.vim

see "joelthelion@github.com/autojump/wiki":https://github.com/joelthelion/autojump/wiki to install native support,

and see "trotter@github.com/autojump.vim":https://github.com/trotter/autojump.vim how to use in vim

h1. INSTALL & UPGRADE PLUGIN BUNDLES

All plugins were checked out as git submodules, which can be upgraded with git pull. For example, to upgrade Command-T

<pre><code>
cd ~/.vim/bundle/command-t
git pull
</code></pre>

To install a new plugin as a git submoudle, type the following commands.

<pre><code>
cd ~/.vim
git submodule add [GIT-REPOSITORY-URL] bundle/[PLUGIN-NAME]
</code></pre>

To install the plugin, when github has new plugins and local repository exists, type the following commands.

<pre><code>
cd ~/.vim
git pull
git submodule upgrade --init
</code></pre>

h1. Vim Customize map key

h2. Leader key and Navigation

<pre>
  <code>
let mapleader=","
let g:mapleader=","
  </code>
</pre>

<pre>
  <code>
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
  </code>
</pre>

h2. Buffer Navigation

<pre>
  <code>
map <silent> gB :bp<cr>
map <silent> gb :bn<cr>
map <silent> g0 :bf<cr>
map <silent> g$ :bl<cr>
  </code>
</pre>

h2. Plugins

<pre>
  <code>
nnoremap <F4> :GundoToggle<CR>
nnoremap <leader>u :GundoToggle<CR>

nnoremap <silent> <F5> :NERDTreeToggle<CR>
nnoremap <silent> <leader>g :NERDTreeToggle<CR>

nnoremap <silent> <F6> :TagbarToggle<CR>
nnoremap <silent> <leader>tb :TagbarToggle<CR>

nnoremap <silent> <F9> :YRShow<cr>
nnoremap <silent> <leader>y :YRShow<cr>

nnoremap <silent> <F10> :YRSearch<cr>
nnoremap <silent> <Leader>gy :YRSearch<cr>
  </code>
</pre>

h1. Plugin: SnipMate

h2. Where is the snippets?

<pre><code>
~/.vim/snippets
</code></pre>

h2. How can i create a snippets?

there is two way to create.

1. ~/.vim/snippets/{filetype}/{shortcut}.snippet - first, find or create the directory naming by file type in ~/.vim/snippets (ex. ~/.vim/snippets/html), second, create the snippets naming by shortcut name (ex. ~/.vim/snippets/html/div.snippet), finally, put the snippet text in here.
<pre><code>
<div id="${1: default}">${2}</div>
</code></pre>

2. ~/.vim/snippets/{filetype}.snippets - put the snippet text in this file, the syntax like

<pre><code>
snippet div
    <div id="${1: default}">
        ${2}
    </div>
</code></pre>

you can reference more in ~/.vim/snippets/

h1. Plugin: Neocomplcache

To read doc about this plugin usage, type following commands.

<pre>
<code>
  :help neocomplcache
</code>
</pre>

h2. Usage

when keyword match the pattern, it will pop a menu, then use <code><C-N></code> and <code><C-P></code> to select next or prev, type <code><C-K></code> to confirm your selection.

or if keyword match the snippet pattern, you can type <code><TAB></code> to do omni-completion, when enter snippet-completion mode, do same as prev step.

h2. Alternative plugin

if don't like this plugin, can use 'SuperTab' to replace it, and it can work well with 'vjde', but neocomplcache can't.

h3. File Completion

use <code><C-f></code> to do file-completion (origin is <code><C-x><C-f></code>)

h3. Omni Completion

HTML, Javascript, CSS: use <code><tab></code> to do omni-completion. (see next for java)

h3. Java-Completion Support

use <code><tab></code> to do keyword / auto completion. (only java-base api, by plugin/vjde)

use <code><C-o></code> to do omni completion. (by plugin/javacomplete, origin is <code><C-x><C-o></code>)

h1. Play! Framework Support

type <code><m><tab></code> will generate model

<pre><code>
package models;

import java.util.*;
import javax.persistence.*;

import play.db.jpa.*;
import play.data.validation.*;

@Entity
public class User extends Model {
    public String name;
}
</code></pre>

type <code><c><tab></code> will generate controller


<pre><code>
package controllers;

import play.*;
import play.mvc.*;
import play.data.validation.*;

import java.util.*;

import models.*;

public class Users extends Controller {

    public static void index() {
	render();
    }
}
</code></pre>

more info in ~/.vim/snippets/java.snippets , ~/.vim/snippets/html.snippets

h1. Learn Vim

Visit the following sites to learn more about Vim:

* "Learn Vim Progressively":http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/

* "Learn Vim Progressively for CN":http://coolshell.cn/articles/5426.html

* "Search and replace for CN":http://greenisland.csie.nctu.edu.tw/wp/2005/09/02/302/

* "Vim Introduction and Tutorial":http://blog.interlinked.org/tutorials/vim_tutorial.html

* "Vimcasts":http://vimcasts.org

* "Learn Vimscript the Hard Way":http://learnvimscriptthehardway.stevelosh.com/

There are many sites teaching Vim, if you know of any other that are easy
to follow for newcomers, let me know.

h1. Cheat Sheet

"http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/":http://blog.vgod.tw/2009/12/08/vim-cheat-sheet-for-programmers/

"http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html":http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html

h1. TODO

"https://github.com/carlhuda/janus":https://github.com/carlhuda/janus

"https://github.com/vgod/vimrc":https://github.com/vgod/vimrc

h1. Yes! We need your help to make it better

We want to offer a better, useful, and modern vim for newer, just like a ide or a powerful text-editor, but the origin vim is lack of many advanced features, and without some awesome plugins, so we create this project. And we want to follow the rule "DRY: Don't Repeat Youself":http://en.wikipedia.org/wiki/Don%27t_repeat_yourself , and "KISS: Keep It Simple & Stupid":http://en.wikipedia.org/wiki/KISS_principle

As you see this project, we have a lot of Issues and many unknown and awesome Plugins in Future. We need Volunteers to help, like disscusing or answering with issues, writing doc, find more useful plugins, and test plugins, and so on.

h2. How to make it better?

* Create issues for suggestion: like improving vimrc setting, or add awesome plugin and so on

* Test Plugin and Talk about your experience with it

* Join the issue comment

* Solve issue: fork this project and create branch to solve issue, then you can send pull request, we will merge it asap.

* Write Document or Wiki

PS. we will pretty thank for your help:)

h1. Credits

* Original project and most of the heavy lifting: @scrooloose
* All the cool plugins for Rails, Cucumber and more: @timpope
* Great Command-T plugin by: Wincent
* Hacks and some snippets: @akitaonrails
